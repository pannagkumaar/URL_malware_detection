import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
import pickle
import warnings


warnings.filterwarnings("ignore")
def sanitization(web):
    web = web.lower()
    tokens = set()
    raw_tokens = set()
    
    for part in web.split('/'):
        raw_tokens.update(part.split('-'))
        raw_tokens.update(part.split('.'))
    
    tokens.update(raw_tokens)
    tokens.discard('com')
    
    return list(tokens)

def load_model(file_path):
    with open(file_path, 'rb') as file:
        model = pickle.load(file)
    return model

def load_vectorizer(file_path):
    with open(file_path, 'rb') as file:
        vectorizer = pickle.load(file)
    return vectorizer

def predict_url(model, vectorizer, url):
    x = vectorizer.transform([url])
    prediction = model.predict(x)[0]
    return prediction

def main():
    # User Input
    url_to_check = input("Input the URL that you want to check (e.g., google.com): ")
    
    # Whitelist
    whitelist = [
    'hackthebox.eu',
    'root-me.org',
    'gmail.com',
    'example.com',
    'trusteddomain.com',
    'linkedin.com',
    'facebook.com',
    'twitter.com',
    'instagram.com',
    'github.com',
    'stackoverflow.com',
    'youtube.com',
    'medium.com',
    'reddit.com',
    'wikipedia.org',
    'amazon.com',
    'netflix.com',
    'spotify.com',
    'microsoft.com',
    'apple.com',
    'google.com',
    'yahoo.com',
    'bing.com',
    'wordpress.org',
    'wordpress.com',
    'blogspot.com',
    'tumblr.com',
    'pinterest.com',
    'wordpress.net',
    'wordpress.biz',
    'wordpress.info',
    'wordpress.co',
    'wordpress.io',
    'wordpress.us',
    'wordpress.tv',
    'wordpress.co.uk',
    'wordpress.net',
    'wordpress.org',
    'wordpress.de',
    'wordpress.ch',
    'wordpress.fr',
    'wordpress.jp',
    'wordpress.it',
    'wordpress.nl',
    'wordpress.pl',
    'wordpress.ca',
    'wordpress.es',
]

    
    # Filtering URL
    if url_to_check in whitelist:
        prediction = 'good'
    else:
        # Loading Model and Vectorizer
        model_path = "Classifier\pickel_model_lgr.pkl"
        vectorizer_path = "Classifier/pickel_vector.pkl"
        lgr_model = load_model(model_path)
        tfidf_vectorizer = load_vectorizer(vectorizer_path)

        # Predicting
        prediction = predict_url(lgr_model, tfidf_vectorizer, url_to_check)

    # Display Result
    print(f"\nThe entered domain is: {prediction}")

    if prediction != 'good':
        print("\nIf you feel that this prediction is wrong or are unsure about the output, you can contact us at harshith007varma007@gmail.com or pannag2003@gmail.com. We'll check the URL and update the model accordingly. Thank you.")

if __name__ == "__main__":
    main()

warnings.resetwarnings()