import requests
import json
import time

def check_urlscan_io(target_url: str, api_key: str, verbosity: bool) -> None:
    try:
        max_wait_time = 120  # 2 minutes
        wait_time = 10  # initial wait time
        elapsed_time = 0
        headers = {
        "Content-Type": "application/json",
        "API-Key": api_key
    }

        # Data for scan submission
        data = {
            "url": url_to_scan,
            "visibility": "public",
            "tags": ["example_tag"]
        }

        # Submit the URL for scanning
        response = requests.post('https://urlscan.io/api/v1/scan/', json=data, headers=headers)

       
        

        response_json = response.json()
        result_api_url = response_json['api']

        while elapsed_time < max_wait_time:
            response_api_url = requests.get(result_api_url)
            response_api_url.raise_for_status()

            if response_api_url.status_code == 200:
                process_urlscan_response(response_api_url.json(), verbosity)
                break
            elif response_api_url.status_code == 404:
                print(f"Scan still in progress. Waiting for {wait_time} seconds...")
                time.sleep(wait_time)
                elapsed_time += wait_time
                wait_time = 5
            else:
                print(f"Unexpected HTTP response code ({response_api_url.status_code}) returned!!")
    except requests.RequestException as req_ex:
        print(f"Error during request: {req_ex}")
    except json.JSONDecodeError as json_ex:
        print(f"Error decoding JSON response: {json_ex}")
    except Exception as ex:
        print(f"An unexpected error occurred: {ex}")
    else:
        print("Execution completed successfully.")

def process_urlscan_response(response_json, verbosity):
    verdict_overall = response_json['verdicts']['overall']
    verdict_urlscan = response_json['verdicts']['urlscan']

    if verdict_overall['score'] > 0:
        print(f"\n[+]\nVerdict overall\n{'-'*20}")
        print(f"[+]\nTime: {response_json['task']['time']}")
        
        for verdict_overall_property, verdict_overall_value in verdict_overall.items():
            if isinstance(verdict_overall_value, list):
                print(f"[!]{verdict_overall_property}:  {verdict_overall_value[0]}")
            else:
                print(f"[!]{verdict_overall_property}:  {verdict_overall_value}")

        if verbosity:
            print(f"\n[+]\nVerdict urlscan\n{'-'*20}")
            for verdict_urlscan_property, verdict_urlscan_value in verdict_urlscan.items():
                if isinstance(verdict_urlscan_value, list):
                    if verdict_urlscan_property == 'brands':
                        for brand_key, brand_value in verdict_urlscan_value[0].items():
                            if brand_value != "":
                                print(f"[!]{brand_key}:  {brand_value}")
                            else:
                                print(f"[-]{brand_key}:  N/A")
                else:
                    if verdict_urlscan_property in ['score', 'malicious']:
                        print(f"[!]{verdict_urlscan_property}:  {verdict_urlscan_value}")

            print(f"[!]\nFor more information about the report, you can check the link below ↓")
            print(f"[+]{response_json['task']['reportURL']}")
    else:
        print(f"\n[!]\nVerdict urlscan\n{'-'*20}")
        print(f"[!]\nScore: {verdict_urlscan['score']}")
        print(f"[!]\nMalicious: {verdict_urlscan['malicious']}")
        
        print(f"\n[!]\nVerdict Overall\n{'-'*20}")
        print(f"[!]\nScore: {verdict_overall['score']}")
        print(f"[!]\nMalicious: {verdict_overall['malicious']}")
        
        print(f"[+]\nFor more information about the report, you can check the link below ↓")
        print(f"[+]{response_json['task']['reportURL']}")

# Example usage:
check_urlscan_io("https://example.com", "9d3f3f59-b6a6-47cb-9b84-4007c1c1469a", True)
