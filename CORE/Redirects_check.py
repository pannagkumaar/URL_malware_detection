from fake_useragent import UserAgent
import requests
from bs4 import BeautifulSoup as bsoup
from rich.console import Console
from rich.table import Table
def check_redirects(url, verbosity=True):
    class URLRedirectionChecker:
        def __init__(self, url):
            self.url = url
            self.expanded_url = None
            self.target_ip_address = None
            self.servers = []

        def get_user_agent(self):
            ua = UserAgent()
            return ua.random

        def get_domain_name(self, url: str) -> str:
            url_parts = url.split('/')
            return url_parts[2]

        def check_url_redirections(self, verbosity=True):
            headers = {
                'Accept-Encoding': 'gzip, deflate, br',
                'User-Agent': self.get_user_agent(),
                'Referer': 'https://iplogger.org/',
                'DNT': '1',
                'Upgrade-Insecure-Requests': '1',
            }

            ip_logger_url_checker = "https://iplogger.org/url-checker/"

            with requests.Session() as session:
                try:
                    response = session.get(ip_logger_url_checker, headers=headers)
                    if 'Set-Cookie' in response.headers:
                        headers['Cookie'] = response.headers['Set-Cookie']
                    if 'Cache-Control' in response.headers:
                        headers['Cache-Control'] = response.headers['Cache-Control']
                    if 'Last-Modified' in response.headers:
                        headers['If-Modified-Since'] = response.headers['Last-Modified']

                    params = {"url": self.url}
                    response = session.get(ip_logger_url_checker, headers=headers, params=params)

                    self.servers = []
                    if response.ok:
                        soup = bsoup(response.content, 'html.parser')
                        servers_info = soup.find_all("div", class_="server-info")

                        for server_info in servers_info:
                            server_items = server_info.find_all("div", class_="server-item")
                            server_antivirus = server_info.find("div", class_="server-antivirus")
                            server_next = server_info.find("div", class_="server-next")
                            server_item_info = {}

                            for server_item in server_items:
                                if server_item.contents and len(server_item.contents) == 2:
                                    key, value = server_item.contents[0].string.strip(), server_item.contents[1].string.strip()
                                    server_item_info[key] = value

                            server_item_info["Status code"] = server_next.contents[1].string.strip()
                            server_item_info["Google Safe Browsing Database"] = server_antivirus.contents[1].string.strip()
                            self.servers.append(server_item_info)

                    self.display_results(verbosity)
                except requests.RequestException as e:
                    print(f"Error checking redirects for {self.url}: {str(e)}")

        def display_results(self, verbosity):
            number_of_redirections = len(self.servers)
            console = Console()

            if verbosity and number_of_redirections > 1:
                table = Table(title="ℝ 𝔼 𝔻 𝕀 ℝ 𝔼 ℂ 𝕋 𝕀 𝕆 ℕ 𝕊", show_lines=True)
                table.add_column("ID", justify="center")
                table.add_column("URL", justify="center", max_width=60)
                table.add_column("Status Code", justify="center")
                table.add_column("IP Address", justify="center")
                table.add_column("Country by IP", justify="center")

                for server_index, server_info in enumerate(self.servers, start=1):
                    table.add_row(
                        str(server_index),
                        server_info.get('Host', ''),
                        server_info.get('Status code', ''),
                        server_info.get('IP address', ''),
                        server_info.get('Country by IP', '')
                    )

                console.print(table)
            elif number_of_redirections > 1:
                table = Table(title="ℝ 𝔼 𝔻 𝕀 ℝ 𝔼 ℂ 𝕋 𝕀 𝕆 ℕ 𝕊", show_lines=True)
                table.add_column("Source URL", justify="center", max_width=60)
                table.add_column("Source Domain", justify="center")
                table.add_column("Destination URL", justify="center", max_width=60)
                table.add_column("Destination Domain", justify="center")
                table.add_row(
                    self.url,
                    self.get_domain_name(self.url),
                    self.expanded_url if self.expanded_url else '',
                    self.get_domain_name(self.expanded_url) if self.expanded_url else ''
                )

                console.print(table)
            else:
                console.print('[green3][green3][-][/green3][/green3] No redirection found!')

    # Instantiate and use the class
    checker = URLRedirectionChecker(url)
    checker.check_url_redirections(verbosity)