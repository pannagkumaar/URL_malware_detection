import time
import requests 
from rich.console import Console
from rich.table import Table
import socket
import json
def urlscan_scan(url_to_scan, api_key):
    console = Console()
    def printc(message, style=None):
        if style:
            console.print(message, style=style)
        else:
            console.print(message)
    def process_urlscan_response(response_json):
        verdict_overall = response_json['verdicts']['overall']
        verdict_urlscan = response_json['verdicts']['urlscan']

        if verdict_overall['score'] > 0:
            printc(f"\n[green3][-][/green3]\nVerdict overall\n{'-'*20}")
            printc(f"[green3][-][/green3]\nTime: {response_json['task']['time']}")
            
            for verdict_overall_property, verdict_overall_value in verdict_overall.items():
                if isinstance(verdict_overall_value, list):
                    printc(f"[gold][!][/gold]{verdict_overall_property}:  {verdict_overall_value[0]}")
                else:
                    printc(f"[gold][!][/gold]{verdict_overall_property}:  {verdict_overall_value}")

            
            printc(f"\n[green3][-][/green3]\nVerdict urlscan\n{'-'*20}")
            for verdict_urlscan_property, verdict_urlscan_value in verdict_urlscan.items():
                if isinstance(verdict_urlscan_value, list):
                    if verdict_urlscan_property == 'brands':
                        for brand_key, brand_value in verdict_urlscan_value[0].items():
                            if brand_value != "":
                                print(f"[gold][!][/gold]{brand_key}:  {brand_value}")
                            else:
                                print(f"[-]{brand_key}:  N/A")
                else:
                    if verdict_urlscan_property in ['score', 'malicious']:
                        print(f"[gold][!][/gold]{verdict_urlscan_property}:  {verdict_urlscan_value}")

            printc(f"[gold][!][/gold] For more information about the report, you can check the link below ‚Üì")
            printc(f"[green3][-][/green3]{response_json['task']['reportURL']}")
        else:
            printc(f"\n[gold][!][/gold] Verdict urlscan\n{'-'*20}")
            printc(f"[gold][!][/gold] Score: {verdict_urlscan['score']}")
            printc(f"[gold][!][/gold] Malicious: {verdict_urlscan['malicious']}")
            
            printc(f"\n[gold][!][/gold] Verdict Overall\n{'-'*20}")
            printc(f"[gold][!][/gold] Score: {verdict_overall['score']}")
            printc(f"[gold][!][/gold] Malicious: {verdict_overall['malicious']}")
            
            printc(f"[green3][-][/green3] For more information about the report, you can check the link below ‚Üì")
            printc(f"[green3][-][/green3]{response_json['task']['reportURL']}")

    # API endpoint for scan submission
    submission_url = "https://urlscan.io/api/v1/scan/"

    # Set headers with API key
    headers = {
        "Content-Type": "application/json",
        "API-Key": api_key
    }

    # Data for scan submission
    data = {
        "url": url_to_scan,
        "visibility": "public",
        "tags": ["example_tag"]
    }
    max_wait_time = 60
    wait_time = 10
    elapsed_time = 0
    # Submit the URL for scanning
    response = requests.post(submission_url, json=data, headers=headers)

    # Check if the submission was successful
    if response.status_code == 200:
        result_data = response.json()
        scan_uuid = result_data["uuid"]
        result_url = result_data["result"]
        
        print(f"Scan submitted successfully! Scan UUID: {scan_uuid}")
        print(f"Check results at: {result_url}")

        # Polling for scan results
        result_api_url = f"https://urlscan.io/api/v1/result/{scan_uuid}/"
        max_wait_time = 300  # Maximum wait time in seconds
        start_time = time.time()  # Initialize start_time

        while elapsed_time < max_wait_time:
            result_response = requests.get(result_api_url)
            result_status = result_response.status_code

            if result_status == 200:
                result_details = result_response.json()
                print("Scan completed successfully!")
                process_urlscan_response(result_details)
                break
            elif result_status == 404:
                time.sleep(5)
            elif result_status == 410:
                print("Scan result has been deleted.")
                break
            else:
                print(f"Unexpected error: {result_status}")
                break
            
            if time.time() - start_time > max_wait_time:
                print("Maximum wait time exceeded. Exiting.")
                break
            else:
                printc(f"[gold1][!][/gold1] Scan still in progress. Waiting for {wait_time} seconds...")
                time.sleep(wait_time)
                elapsed_time += wait_time
                wait_time = 5
            
    else:
        print(f"Error submitting the scan. Status Code: {response.status_code}")
        print("Error Details:", response.text)
def check_virustotal(target_url, api_key) :
    console = Console()
    
    def printc(message, style=None):
        if style:
            console.print(message, style=style)
        else:
            console.print(message)

    url = "https://www.virustotal.com/api/v3/urls"
    payload = f"url={target_url}"
    headers = {
        "accept": "application/json",
        "x-apikey": api_key,
        "content-type": "application/x-www-form-urlencoded"
    }
    max_wait_time = 60
    wait_time = 10
    elapsed_time = 0

    response = requests.post(url, data=payload, headers=headers)

    if response.status_code == 200:
        url_scan_link = response.json()['data']['links']['self']
        while elapsed_time < max_wait_time:
            url_analysis_report = requests.get(url_scan_link, headers=headers)

            if url_analysis_report.status_code == 200:
                url_analysis_report_json = url_analysis_report.json()
                url_analysis_report_id = url_analysis_report_json['meta']['url_info']['id']
                total_number_of_vendors = len(url_analysis_report_json['data']['attributes']['results'].keys())
                url_report_gui = "https://www.virustotal.com/gui/url/" + url_analysis_report_id
                url_scan_stats = url_analysis_report_json['data']['attributes']['stats']
                malicious_stats = url_scan_stats['malicious']
                results = url_analysis_report_json['data']['attributes']['results']

                if total_number_of_vendors > 0:
                    if malicious_stats > 0:
                        printc(f"[gold1][!][/gold1] [red3]{malicious_stats} security vendors flagged this URL as malicious[/red3]")
                    else:
                        printc(f"[spring_green2][+][/spring_green2] No security vendors flagged this URL as malicious")

                    printc(f"[spring_green2][+][/spring_green2] Security vendors' analysis\n{'-'*32}")

                
                    for stat, stat_value in url_scan_stats.items():
                        printc(f"[gold1][!][/gold1] {stat}: {stat_value}/{total_number_of_vendors}")

                        if malicious_stats > 0:
                            table = Table(title="ùîª ùîº ùïã ùî∏ ùïÄ ùïÉ ùïä", show_lines=True)
                            table.add_column("VENDOR", justify="center", max_width=60)
                            table.add_column("RESULT", justify="center")
                            table.add_column("METHOD", justify="center")
                            for key, value in results.items():
                                if value['category'] == "malicious":
                                    table.add_row(key, value['result'], value['method'])
                            printc(table)
                    

                    printc(f"[spring_green2][+][/spring_green2] For more information, you can check the link below ‚Üì")
                    printc(f"[spring_green2][+][/spring_green2] {url_report_gui}")
                    break
                else:
                    printc(f"[gold1][!][/gold1] Scan still in progress. Waiting for {wait_time} seconds...")
                    time.sleep(wait_time)
                    elapsed_time += wait_time
                    wait_time = 5
            else:
                printc(f"[red3][-][/red3] {url_analysis_report.text}")
    else:
        printc(f"[red3][-][/red3] {response.text}")
def check_abuse_ip_db( url_toCheck, api_key: str) :
    console=Console()
    def printc(message, style=None):
        if style:
            console.print(message, style=style)
        else:
            console.print(message)
    def get_ip_address(url):
        try:
            # Perform DNS resolution
            ip_address = socket.gethostbyname(url)
            return ip_address
        except socket.error as e:
            print(f"Error: {e}")
            return None        
    ip_address=get_ip_address(url_toCheck)
    
    if not ip_address:    
        printc(f"[red3][-][/red3] Unable to resolve {url_toCheck} to an ip address")
        return
    url = 'https://api.abuseipdb.com/api/v2/check'
    
    querystring = {
        'ipAddress': ip_address,
        'maxAgeInDays': '365'
    }

    headers = {
        'Accept': 'application/json',
        'Key': api_key
    }

    response = requests.request(method='GET', url=url, headers=headers, params=querystring)
    # print(response.text)
    if response.ok:
        # Formatted output
        decodedResponse = json.loads(response.text)
        ip_info_dict = dict(decodedResponse['data'])
        if ip_info_dict['totalReports']:
            print("debug")
            printc(f"[gold1][!][/gold1] [gold1]{ip_address}[/gold1] was found in Abuse IP DB!")
            printc(f"[gold1][!][/gold1] This IP was reported [gold1]{ip_info_dict['totalReports']}[/gold1] times by [gold1]{ip_info_dict['numDistinctUsers']}[/gold1] distinct users.")
            printc(f"[gold1][!][/gold1] Confidence of Abuse is [gold1]{ip_info_dict['abuseConfidenceScore']}[/gold1]")
            
            for property in sorted(ip_info_dict.keys()):
                if property not in ['abuseConfidenceScore', 'numDistinctUsers', 'totalReports']:
                    printc(f"[spring_green2][+][/spring_green2] {property}:  {ip_info_dict[property]}")
        
            printc(f"N/A")
        else:
            printc(f"[spring_green2][+][/spring_green2] [gold1]{ip_address}[/gold1] was not found in Abuse IP DB!")    
    elif response.status_code == 401:
        printc(f"[red3][-][/red3] {response.json()['errors'][0]['detail']}")
        printc(f"[gold1][!][/gold1] Thanks to read the documentation: https://github.com/0liverFlow/HookPhish/blob/main/README.md")
    else:
        printc(f"[red3][-][/red3] {response.text}")
        printc(f"[gold1][!][/gold1] Thanks to report this issue at https://github.com/0liverFlow/HookPhish/issues")